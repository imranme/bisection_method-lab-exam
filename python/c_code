------Bisection---------
#include <iostream>
#include <cmath>
using namespace std;

// Function definition: f(x) = x^3 - 5x + 1
double f(double x) {
    return x*x*x - 5*x + 1;
}

// Bisection Method function
void bisection(double a, double b, double tol, int max_iter) {
    if (f(a) * f(b) >= 0) {
        cout << "Invalid interval! f(a) and f(b) must have opposite signs." << endl;
        return;
    }

    double c, prev_c = a;
    int iter = 0;

    cout << "Iter\t a\t\t b\t\t c\t\t f(c)" << endl;
    cout << "------------------------------------------------------" << endl;

    while ((b - a) >= tol && iter < max_iter) {
        c = (a + b) / 2;
        cout << iter + 1 << "\t " << a << "\t " << b << "\t " << c << "\t " << f(c) << endl;

        if (fabs(c - prev_c) < tol || fabs(f(c)) < tol) {
            break;
        }

        // Update interval
        if (f(c) * f(a) < 0) {
            b = c;
        } else {
            a = c;
        }

        prev_c = c;
        iter++;
    }

    cout << "\nApproximate Root: " << c << " after " << iter << " iterations." << endl;
}

int main() {
    double a = 0, b = 1; // Initial interval
    double tolerance = 0.0001; // Desired precision
    int max_iterations = 20;

    cout << "Finding root using Bisection Method...\n";
    bisection(a, b, tolerance, max_iterations);

    return 0;
}


-------False------
#include <iostream>
#include <cmath>
using namespace std;

// Define the function f(x) = x^3 - 5x + 1
double f(double x) {
    return x*x*x - 5*x + 1;
}

// Regula Falsi Method Function
void regulaFalsi(double a, double b, double tol, int max_iter) {
    if (f(a) * f(b) >= 0) {
        cout << "Invalid interval! f(a) and f(b) must have opposite signs." << endl;
        return;
    }

    double xk = a; // initial guess
    double prev_xk;
    int iter = 0;

    cout << "Iter\t a\t\t b\t\t xk\t\t f(xk)" << endl;
    cout << "------------------------------------------------------" << endl;

    while (iter < max_iter) {
        prev_xk = xk;
        xk = (a * f(b) - b * f(a)) / (f(b) - f(a)); // False Position formula
        double fxk = f(xk);

        cout << iter + 1 << "\t " << a << "\t " << b << "\t " << xk << "\t " << fxk << endl;

        if (fabs(xk - prev_xk) < tol || fabs(fxk) < tol) {
            break; // Root found within tolerance
        }

        // Update interval
        if (fxk * f(b) < 0) {
            a = xk;
        } else {
            b = xk;
        }

        iter++;
    }

    cout << "\nApproximate Root: " << xk << " after " << iter << " iterations." << endl;
}

// Main function
int main() {
    double a = 0, b = 1; // Initial interval
    double tolerance = 0.0001; // Precision
    int max_iterations = 20;

    cout << "Finding root using Regula Falsi Method...\n";
    regulaFalsi(a, b, tolerance, max_iterations);

    return 0;
}

------- Secant--------

#include <iostream>
#include <cmath>
using namespace std;

// Define the function f(x)
double f(double x) {
    return x*x*x - 5*x + 1;  // Example: x^3 - 5x + 1
}

// Secant Method function
void secant(double x0, double x1, double tol, int max_iter) {
    double xk;
    int iter = 2;

    cout << "Iter\t xk\t\t f(xk)" << endl;
    cout << "-------------------------------" << endl;

    while (iter <= max_iter) {
        if (fabs(f(x1) - f(x0)) < 1e-12) {
            cout << "Division by near-zero detected. Method fails." << endl;
            return;
        }

        // Secant formula
        xk = (x1 * f(x0) - x0 * f(x1)) / (f(x0) - f(x1));
        cout << iter << "\t " << xk << "\t " << f(xk) << endl;

        if (fabs(xk - x1) < tol) {
            break;
        }

        // Update guesses
        x0 = x1;
        x1 = xk;
        iter++;
    }

    cout << "\nApproximate Root: " << xk << " after " << iter - 1 << " iterations." << endl;
}

// Main function
int main() {
    double x0 = 0, x1 = 1;     // Initial guesses
    double tol = 0.0001;       // Tolerance
    int max_iter = 20;         // Max iterations

    cout << "Finding root using Secant Method...\n";
    secant(x0, x1, tol, max_iter);

    return 0;
}

---------Newton's Raphson Method-----------

#include <iostream>
#include <cmath>
using namespace std;

// Define the function f(x)
double f(double x) {
    return x*x*x - 5*x + 1;  // Example: x^3 - 5x + 1
}

// Define the derivative f'(x)
double df(double x) {
    return 3*x*x - 5;  // Derivative of f(x)
}

// Newton-Raphson Method
void newtonRaphson(double x0, double tol, int max_iter) {
    double xk = x0;
    double xk_prev;
    int iter = 1;

    cout << "Iter\t xk\t\t f(xk-1)\t\t f'(xk-1)" << endl;
    cout << "-------------------------------------------------" << endl;

    while (iter <= max_iter) {
        double fx = f(xk);
        double dfx = df(xk);

        if (fabs(dfx) < 1e-12) {
            cout << "Derivative too close to zero. Method fails." << endl;
            return;
        }

        xk_prev = xk;
        xk = xk_prev - fx / dfx;

        cout << iter << "\t " << xk << "\t " << fx << "\t " << dfx << endl;

        if (fabs(xk - xk_prev) < tol) {
            break;
        }

        iter++;
    }

    cout << "\nApproximate Root: " << xk << " after " << iter - 1 << " iterations." << endl;
}

// Main function
int main() {
    double x0 = 1;          // Initial guess
    double tol = 0.0001;    // Tolerance
    int max_iter = 20;      // Max iterations

    cout << "Finding root using Newton-Raphson Method...\n";
    newtonRaphson(x0, tol, max_iter);

    return 0;
}

------------Newton's forward method----------
#include <iostream>
#include <iomanip>
using namespace std;

// Max number of data points
const int MAX = 20;

int factorial(int n) {
    int fact = 1;
    for (int i = 2; i <= n; ++i)
        fact *= i;
    return fact;
}

// Newton's Forward Interpolation
int main() {
    int n;
    double x[MAX], f[MAX][MAX];

    // Step 1: Read number of data points
    cout << "Enter the number of data points: ";
    cin >> n;

    // Step 2: Read x and f(x) values
    cout << "Enter x and f(x) values:\n";
    for (int i = 0; i < n; i++) {
        cin >> x[i] >> f[i][0];
    }

    // Step 3: Generate forward difference table
    for (int j = 1; j < n; j++) {
        for (int i = 0; i < n - j; i++) {
            f[i][j] = f[i+1][j-1] - f[i][j-1];
        }
    }

    // Step 4: Read interpolation point
    double xp;
    cout << "Enter interpolation point: ";
    cin >> xp;

    // Step 5: Calculate h and p
    double h = x[1] - x[0];
    double p = (xp - x[0]) / h;

    // Step 6: Apply Newton’s forward formula
    double sum = f[0][0];
    double prod = 1.0;

    for (int i = 1; i < n; i++) {
        prod *= (p - (i - 1));
        sum += (prod * f[0][i]) / factorial(i);
    }

    // Step 7: Print the result
    cout << fixed << setprecision(6);
    cout << "The interpolated value at x = " << xp << " is " << sum << endl;

    return 0;
}

-----Newton's Backward method------
#include <iostream>
#include <iomanip>
using namespace std;

const int MAX = 20;

int factorial(int n) {
    int fact = 1;
    for (int i = 2; i <= n; ++i)
        fact *= i;
    return fact;
}

// Newton's Backward Interpolation
int main() {
    int n;
    double x[MAX], f[MAX][MAX];

    // Step 1: Read number of data points
    cout << "Enter the number of data points: ";
    cin >> n;

    // Step 2: Read x and f(x) values
    cout << "Enter x and f(x) values:\n";
    for (int i = 0; i < n; i++) {
        cin >> x[i] >> f[i][0];
    }

    // Step 3: Construct backward difference table
    for (int j = 1; j < n; j++) {
        for (int i = n - 1; i >= j; i--) {
            f[i][j] = f[i][j - 1] - f[i - 1][j - 1];
        }
    }

    // Step 4: Read the interpolation point
    double xp;
    cout << "Enter the interpolation point: ";
    cin >> xp;

    // Step 5: Calculate h and p
    double h = x[1] - x[0];
    double p = (xp - x[n - 1]) / h;

    // Step 6: Apply Newton’s backward interpolation formula
    double sum = f[n - 1][0];
    double prod = 1.0;

    for (int i = 1; i < n; i++) {
        prod *= (p + (i - 1));
        sum += (prod * f[n - 1][i]) / factorial(i);
    }

    // Step 7: Print result
    cout << fixed << setprecision(6);
    cout << "The interpolated value at x = " << xp << " is " << sum << endl;

    return 0;
}